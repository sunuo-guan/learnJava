package com.huawei.two;

import java.util.*;

public class Main {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
		int m = scanner.nextInt();
		int r[][] = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				r[i][j] = scanner.nextInt();
			}
		}
		System.out.println(solution(n, m, r));
	}
	
	public static int solution(int n, int m, int[][] r) {
		int nums = n * m;
		int[][] matrix = new int[nums][nums];
		for (int i = 0; i < nums; i++) {
			for (int j = 0; j < nums; j++) {
				matrix[i][j] = 1000000;
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if(j+1<m && r[i][j] != r[i][j+1]) {
					matrix[m*i + j][m*i + j + 1] = 1;
					matrix[m*i + j + 1][m*i + j] = 1;
				}
				if(i+1<n && r[i][j] != r[i+1][j]) {
					matrix[m*i + j][m*(i+1) + j] = 1;
					matrix[m*(i+1) + j][m*i + j] = 1;
				}
			}
		}
		
		Graph graph = new Graph(nums, matrix);
		graph.dfs();
		
		for (int i = 0; i < nums; i++) {
			for (int j = 0; j < nums; j++) {
				for (int k = 0; k < nums; k++) {
					matrix[j][k] = Math.min(matrix[j][k], matrix[j][i] + matrix[i][k]);
				}
			}
		}
		
		int res = 0;
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix.length; j++) {
				res = Math.max(res, matrix[i][j]);
			}
		}
		return res;
	}
}

class Graph {
	private ArrayList<String> vertex;
	private int[][] edges;
	private int numOfEdges;
	private int numOfVertex;
	public int maxLen;
	public int len;

	public Graph(int n, int[][] matrix) {
		vertex=new ArrayList<String>(n);
		edges = matrix;
		numOfEdges=0;
		numOfVertex = n;
		for (int i = 0; i < matrix.length; i++) {
			for (int j = i; j < matrix.length; j++) {
				if(matrix[i][j] == 1) {
					numOfEdges++;
				}
			}
		}
		for (int i = 0; i < n; i++) {
			vertex.add("A");
		}
	}
	
	//根据此时节点下标获取第一个邻接节点的下标
	public int getFirtstNeighbor(int v1) {
		for (int i = 0; i < edges.length; i++) {    //?
			if(edges[v1][i]==1) {  
				return i;
			}
		}
		return -1;
	}
	
	//根据此时节点下标和第一个邻接节点的下标来获取第二个邻接节点下标
	public int getSecondNeighbor(int v1,int v2) {
		for (int i = v2+1; i < edges.length; i++) {
			if(edges[v1][i]==1) {
				return i;
			}
		}
		return -1;
	}
	
	//深度遍历优先
	private void dfs(boolean isVisited[], int index) {
		len++;
		isVisited[index]=true;
		//找邻接节点
		int neighbor=getFirtstNeighbor(index);
		while(neighbor!=-1) {   //存在邻接，则分是否访问过两种情况 不存在则直接返回
			if(isVisited[neighbor]==false) {   //未访问过，则对其进行深度优先访问
				dfs(isVisited,neighbor);
			}else {                          //被访问过，则看第二个邻接节点
				neighbor=getSecondNeighbor(index, neighbor);
			}
			
		}
	}
	
	//对外接口：循环图中所有元素进行深度遍历，可能存在非连通图的情况
	public void dfs() {
		maxLen = 0;
		len = 0;
		boolean isVisited[]=new boolean[vertex.size()];
		for (int i = 0; i < numOfVertex; i++) {
			if(isVisited[i]==false) {
				dfs(isVisited,i);
			}
			maxLen = Math.max(maxLen, len);
			len = 0;
		}
		System.out.println(maxLen);
	}
}
